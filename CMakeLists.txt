CMAKE_MINIMUM_REQUIRED(VERSION 3.17)

PROJECT(ffmpeg-cpp LANGUAGES CXX)

# Build ffmpeg-cpp has static vs shared library
OPTION(BUILD_SHARED_LIBS "Build using shared libraries" ON)

# Build swig wrapper for js and python
OPTION(BUILD_SWIG_WRAPPER "Build swig wrapper for js / py" ON)

# Build tests
OPTION(BUILD_TESTS "Build tests" ON)

# Set Color output
OPTION(CMAKE_FORCE_COLORED_OUTPUT "Always produce ANSI-colored output (GNU)." TRUE)
IF(${CMAKE_FORCE_COLORED_OUTPUT})
    IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        ADD_COMPILE_OPTIONS($<$<COMPILE_LANGUAGE:CXX>:-fdiagnostics-color=always>)
    ELSEIF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        ADD_COMPILE_OPTIONS($<$<COMPILE_LANGUAGE:CXX>:-fcolor-diagnostics>)
    ENDIF()
ENDIF()

# Set CMAKE FLAGS
SET(CMAKE_OBJECT_PATH_MAX 200)
SET(CMAKE_USE_RELATIVE_PATHS TRUE)
SET(CMAKE_CXX_EXTENSIONS ON)
SET(CMAKE_CXX_STANDARD 17)
SET(CMAKE_CXX_STANDARD_REQUIRED TRUE)
SET(CMAKE_POSITION_INDEPENDENT_CODE ON)

# Configure CCache if available
FIND_PROGRAM(CCACHE_FOUND ccache)
IF(CCACHE_FOUND)
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ${CCACHE_FOUND})
    SET_PROPERTY(GLOBAL PROPERTY RULE_LAUNCH_LINK ${CCACHE_FOUND})
    EXECUTE_PROCESS(COMMAND "${CCACHE_FOUND}" --version OUTPUT_VARIABLE CCACHE_VERSION)
    STRING(REGEX REPLACE ".*([0-9]+\\.[0-9]+\\.[0-9]+).*" "\\1" CCACHE_VERSION "${CCACHE_VERSION}")
    MESSAGE(STATUS "Found ccache: ${CCACHE_FOUND} (found version \"${CCACHE_VERSION}\")")
ELSE()
    MESSAGE(STATUS "Could NOT find ccache (missing: ccache)")
ENDIF()

# Apple Specific
IF(APPLE)
    EXEC_PROGRAM(
        defaults ARGS
        read loginwindow SystemVersionStampAsString
        OUTPUT_VARIABLE SYSTEM_VERSION
    )

    SET(CMAKE_OSX_DEPLOYMENT_TARGET ${SYSTEM_VERSION})
ENDIF()

# Linux Specific
IF(UNIX AND NOT APPLE)
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC")
ENDIF()

ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/ffmpeg)
ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/src)

IF(BUILD_SWIG_WRAPPER)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/swig)
ENDIF()

IF(BUILD_TESTS)
    INCLUDE(CTest)
    ADD_SUBDIRECTORY(${PROJECT_SOURCE_DIR}/tests)
ENDIF()